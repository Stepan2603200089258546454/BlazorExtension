@page "/"
@page "/Home"
@rendermode InteractiveServer

<PageTitle>Главная</PageTitle>

<ModalDialog Settings="ModalDialogSettings" OnResult="CallBackModal">
    <HeaderContent>
        Модальное окно
    </HeaderContent>
    <BodyContent>
        Тело модального окна
    </BodyContent>
    <ButtonOkContent>Принять</ButtonOkContent>
    <ButtonNoContent>Отклонить</ButtonNoContent>
    <ButtonCancelContent>Закрыть</ButtonCancelContent>
</ModalDialog>

<h1>Привет, мир! [@RendererInfo.Name]</h1>

Добро пожаловать в ваше новое приложение.

<div class="mb-3">
    <Button Settings="ButtonSettings">Custom button</Button>
    <button class="btn btn-primary" @onclick="Invoke1">JS 1</button>
    <button class="btn btn-primary" @onclick="Invoke2">JS 2</button>
</div>
<TabList Settings="TabListSettings">
    <HeaderContent>
        <TabListHeaderItem Settings="@TabListSettings.GetItemsSettings("test-1", true)">
            Test-1
        </TabListHeaderItem>
        <TabListHeaderItem Settings="@TabListSettings.GetItemsSettings("test-2")">
            Test-2
        </TabListHeaderItem>
    </HeaderContent>
    <BodyContent>
        <TabListBodyItem Settings="@TabListSettings.GetItemsSettings("test-1", true)">
            Test 1
        </TabListBodyItem>
        <TabListBodyItem Settings="@TabListSettings.GetItemsSettings("test-2")">
            Test 2
        </TabListBodyItem>
    </BodyContent>
</TabList>

@code {
    private DeviceInfoService test;
    [Inject]
    private IJSRuntime js { get; set; }
    [Inject]
    private BootstrapHelperService bootstrapHelper { get; set; }
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    private ButtonSettings ButtonSettings = new ButtonSettings()
    {
        Id = "test-btn",
        AttributeSettings = new ButtonAttributeSettings().OpenModal("modal"),
    };
    private ModalDialogSettings ModalDialogSettings = new ModalDialogSettings()
    {
        Id = "modal",
        ButtonOkSettings = new ButtonSettings()
        {
            Id = string.Empty,
            StyleType = ButtonStyleType.OutlinePrimary,
            AttributeSettings = new ButtonAttributeSettings().CloseModal()
        }
    };
    private TabListSettings TabListSettings = new TabListSettings()
    {
        Id = "tab-list-demo",
        Type = TabListType.Pill,
        Fill = TabListFill.Default,
        Orientation = TabListOrientation.Horizontal
    };

    protected override async Task OnInitializedAsync()
    {
        test = new DeviceInfoService(js);
        var deviceInformation = test.GetDeviceInfo(HttpContext);
        await base.OnInitializedAsync();
    }

    private async Task Invoke1()
    {
        var size = await test.GetViewportSize();
        var deviceInformation = await test.GetDeviceInfo();
        var openModal = await bootstrapHelper.OpenModal(ModalDialogSettings.Id);
    }
    private async Task Invoke2()
    {
        var closeModal = await bootstrapHelper.CloseModal(ModalDialogSettings.Id);
    }

    private async Task CallBackModal(bool? value)
    {

    }
}