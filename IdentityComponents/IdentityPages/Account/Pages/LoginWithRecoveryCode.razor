@attribute [Route(IdentityConst.IdentityRoute.Account.LoginWithRecoveryCode)]

@inject IUserManager UserManager

<PageTitle>Проверка кода восстановления</PageTitle>

<h1>Проверка кода восстановления</h1>
<hr />
<StatusMessage Message="@UserManager.Message" />
<p>
    Вы запросили вход с кодом восстановления. Этот логин не будет запомнен, пока вы не укажете код приложения для аутентификации при 
    входе или не отключите двухфакторную аутентификацию и не войдете снова.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" id="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="Код восстановления" />
                <label for="Input.RecoveryCode" class="form-label">Код восстановления</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Авторизоваться</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private RecoveryCodeInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Убедитесь, что пользователь сначала прошел через экран ввода имени пользователя и пароля
        user = await UserManager.GetTwoFactorAuthenticationUserAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        await UserManager.OnLoginWithRecoveryCodeValidSubmitAsync(user, Input, ReturnUrl);
    }
}
