@attribute [Route(Const.IdentityRoute.Account.Register)]

@inject IUserManager UserManager

<PageTitle>Зарегистрироваться</PageTitle>

<h1>Зарегистрироваться</h1>

<div class="row">
    <div class="col-lg-6">
        
        <StatusMessage Message="@UserManager.Message" />

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Создайте новую учетную запись.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username"
                           aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Электронная почта</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control"
                           autocomplete="new-password" aria-required="true" placeholder="пароль" />
                <label for="Input.Password">Пароль</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control"
                           autocomplete="new-password" aria-required="true" placeholder="пароль" />
                <label for="Input.ConfirmPassword">Подтвердите пароль</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Воспользуйтесь другим сервисом для регистрации.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private RegisterInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        await UserManager.RegisterUser(editContext, Input, ReturnUrl);
    }
}
