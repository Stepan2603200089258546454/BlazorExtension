@attribute [Route(IdentityConst.IdentityRoute.AccountManage.SetPassword)]

@inject IAccountManager AccountManager

<PageTitle>Установить пароль</PageTitle>

<h3>Установите свой пароль</h3>

<StatusMessage Message="@AccountManager.Message" />

<p class="text-info">
    У вас нет локального имени пользователя/пароля для этого сайта. Добавьте локальную
    учётную запись, чтобы иметь возможность войти без внешнего входа.
</p>

<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="form-control"
                           autocomplete="new-password" placeholder="Введите новый пароль" />
                <label for="Input.NewPassword" class="form-label">Новый пароль</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control"
                           autocomplete="new-password" placeholder="Введите новый пароль" />
                <label for="Input.ConfirmPassword" class="form-label">Подтвердите пароль</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Установить пароль</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private SetPasswordInputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await AccountManager.SetPasswordOnInitializedAsync(HttpContext);
    }

    private async Task OnValidSubmitAsync()
    {
        await AccountManager.SetPasswordOnValidSubmitAsync(HttpContext, user, Input);
    }
}
