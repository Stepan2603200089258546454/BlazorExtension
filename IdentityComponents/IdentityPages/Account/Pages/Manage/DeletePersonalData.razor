@attribute [Route(IdentityConst.IdentityRoute.AccountManage.DeletePersonalData)]

@inject IAccountManager AccountManager

<PageTitle>Удалить персональные данные</PageTitle>

<StatusMessage Message="@AccountManager.Message" />

<h3>Удалить персональные данные</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Удаление этих данных приведет к безвозвратному удалению вашей учетной записи, и восстановить ее будет невозможно.</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        @if (requirePassword)
        {
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password"
                           aria-required="true" placeholder="Пожалуйста, введите свой пароль." />
                <label for="Input.Password" class="form-label">Пароль</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
        }
        <button class="btn btn-danger" type="submit">Удалить данные и закрыть мой аккаунт</button>
    </EditForm>
</div>

@code {
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private DeletePersonalDataInputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        (ApplicationUser user, bool requirePassword) initValue = await AccountManager.DeletePersonalDataOnInitializedAsync(HttpContext);
        user = initValue.user;
        requirePassword = initValue.requirePassword;
    }

    private async Task OnValidSubmitAsync()
    {
        await AccountManager.DeletePersonalDataOnValidSubmitAsync(user, requirePassword, Input);
    }
}
