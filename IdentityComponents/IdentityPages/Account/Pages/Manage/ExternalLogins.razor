@attribute [Route(IdentityConst.IdentityRoute.AccountManage.ExternalLogins)]

@inject IAccountManager AccountManager

<PageTitle>Управляйте внешними логинами</PageTitle>

<StatusMessage />

@if (currentLogins?.Count > 0)
{
    <h3>Зарегистрированные логины</h3>

    <table class="table">
        <tbody>
            @foreach (var login in currentLogins)
            {
                <tr>
                    <td>@login.ProviderDisplayName</td>
                    <td>
                        @if (showRemoveButton)
                        {
                            <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                                <AntiforgeryToken />
                                <div>
                                    <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                                    <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                                    <button type="submit" class="btn btn-primary" title="Удалить этот логин @login.ProviderDisplayName из вашей учетной записи">Remove</button>
                                </div>
                            </form>
                        }
                        else
                        {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (otherLogins?.Count > 0)
{
    <h4>Добавьте еще одну услугу для входа.</h4>
    <hr />
    <form class="form-horizontal" action="@IdentityConst.IdentityRoute.AccountManage.LinkExternalLogin" method="post">
        <AntiforgeryToken />
        <div>
            <p>
                @foreach (var provider in otherLogins)
                {
                    <button type="submit" class="btn btn-primary" name="Provider" value="@provider.Name" title="Войдите в систему, используя свою учетную запись @provider.DisplayName.">
                        @provider.DisplayName
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var res = await AccountManager.ExternalLoginsOnInitializedAsync(HttpContext, Action);
        user = res.user;
        currentLogins = res.currentLogins;
        otherLogins = res.otherLogins;
        showRemoveButton = res.showRemoveButton;
    }

    private async Task OnSubmitAsync()
    {
        await AccountManager.ExternalLoginsOnSubmitAsync(HttpContext, user, LoginProvider, ProviderKey);
    }
}
